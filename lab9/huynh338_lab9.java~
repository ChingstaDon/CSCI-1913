//CSCI 1913 Lab 9
//Donald Huynh

class ArrayQueue<Base>
{
	private int front;	//   Index of front object in OBJECTS.
	private int rear;	//   Index of rear object in OBJECTS.
	private Base[] objects;	//   The OBJECTs in the queue.

	//   Constructor. Make a new empty queu that can hold SIZE - 1 elements.
	publie ArrayQueue(int size)
	{
		if (size <= 1)
		{
			throw new IllegalArgumentException("Illegal size.");
		}
		else
		{
			front = 0;
			rear = 0;
			objects = (Base []) new Object[size];
		}
	}

	//   DEQUEUE. Remove an object from the queue.
	
	public Base dequeue()
	{
		if (front == rear)
		{
			throw new IllegalStateException("Queue is empty.");
		}
		else
		{
			front = (front + 1) % objects.length;
			Base temp = objects[front];
			objects[front] = null;
			return temp;
		}
	}

	//   ENQUEUE. Add a new OBJECT to the queue.
	
	public void enqueue(Base object)
	{
		int nextRear = (rear + 1) % objects.length;
		if (front == nextRear)
		{
			throw new IllegalStateException("Queue is full.");
		}
		else
		{
			rear = nextRear;
			objects[rear] = object;
		}
	}

	//   IS EMPTY. Test if the queue is empty.
	
	public boolean isEmpty()
	{
		return front == rear;
	}

	// IS FULL. Test if the queue is full.
	
	public boolearn isFull()
	{
		return front == (rear + 1) % objects.length;
	}

	public class Iterator
	{
		private int where;
		private Iterator()
		{
			where = front;
		}

		public boolean hasNext()
		{
			return where != rear;
		}

		public Base next()
		{
			if (where == rear)
			{
				throw new IllegalStateException("No next elements.");
			}
			else
			{
				Base temp = objects[where];
				where = (where + 1) % objects.length;
				return temp;
			}
		}

	}

	public Iterator iterator()
	{
		return new Iterator();
	}
}


